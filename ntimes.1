.TH "NTIMES" "1" " General Commands Manual" "ntimes" "JUNE 2016" 
.nh
.ad l


.SH NAME
.PP
ntimes \- \fBtime(1)\fP with average time, flaky rate, ..


.SH SYNOPSIS
.PP
\fBntimes\fP [OPTIONS] COMMAND [arg...]


.SH DESCRIPTION
.PP
ntimes is an improved version of \fBtime(1)\fP\&.

.PP
You can execute an command`N times, and measure the average/max/min time taken for the execution.
You can also measure the "flaky" rate (i.e. failure rate).


.SH OPTIONS
.PP
\fB\-\-help\fP
  Print usage statement

.PP
\fB\-f\fP, \fB\-\-format\fP=\fI""\fP
  Format string (in golang text/template, e.g. "{{json .}}")

.PP
\fB\-n\fP, \fB\-\-repeat\-n\-timesg\fP=\fI1\fP
  Number of times

.PP
\fB\-\-storage\fP
  Path to stdout,stderr storage

.PP
\fB\-\-version\fP
  Print version to stdout and exit

.PP
\fB\-\-warm\-up\fP
  Skip first n iterations for stat


.SH Examples
.PP
Example usage:

.PP
.RS

.nf
$ ntimes \-n 10 bash \-c 'sleep=$((RANDOM%5)); fail=$((RANDOM%2)); echo "id=$NTIMES\_ID, sleep=$sleep, fail=$fail"; sleep $sleep; exit $fail'
id=0, sleep=4, fail=0
id=1, sleep=0, fail=0
id=2, sleep=3, fail=1
id=3, sleep=4, fail=0
id=4, sleep=3, fail=1
id=5, sleep=0, fail=1
id=6, sleep=3, fail=1
id=7, sleep=0, fail=0
id=8, sleep=3, fail=1
id=9, sleep=3, fail=1

real average: 2.303595053s, max: 4.004607594s, min: 3.455164ms, std dev: 1.636182569s
real 99 percentile: 4.004607594s, 95 percentile: 4.004607594s, 50 percentile: 3.002190904s
user average: 0, max: 0, min: 0, std dev: 0
sys  average: 0, max: 0, min: 0, std dev: 0
flaky: 60%

.fi
.RE

.PP
You can specify the report format using Go's \fBtext/template\fP syntax.
Additionally to the standard functions provided by \fBtext/template\fP, the \fBjson\fP function is available.
Note that a \fBtime.Duration\fP value is expressed in nanoseconds.

.PP
.RS

.nf
$ ntimes \-\-format "{{json .}}" \-n 10 dd if=/dev/urandom of=/dev/null bs=512 count=1000
1000+0 records in
1000+0 records out
512000 bytes (512 kB, 500 KiB) copied, 0.0448978 s, 11.4 MB/s
...
{"real":{"average":44155207,"max":68222928,"min":38143407,"stddev":9421337,"percentiles":{"50":39855284,"95":68222928,"99":68222928}},"user":{"average":0,"max":0,"min":0,"stddev":0},"system":{"average":36000000,"max":36000000,"min":36000000,"stddev":0},"flaky":0}

.fi
.RE

.PP
Practical example for debugging flaky tests with Namazu ( \fBnmz(1)\fP, 
\[la]https://github.com/osrg/namazu):\[ra]

.PP
.RS

.nf
$ cd some\_maven\_project
$ sudo ntimes \-n 10 \-\-storage /tmp/logs nmz inspectors \-cmd "mvn test"
...
Flaky: 10%

$ find /tmp/logs \-name result.json | xargs jq .successful
true
true
true
false
true
true
true
true
true
true

.fi
.RE


.SH SEE ALSO
.PP
\fBtime(1)\fP, \fBnmz(1)\fP


.SH AUTHOR
.PP
June 2016, writen by Akihiro Suda

\[la]https://github.com/AkihiroSuda/ntimes\[ra]
